<?php

/**
 * @file
 * JQuery UI Datepicker module.
 */

use Drupal\Core\Datetime\Element\Datetime;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Datetime\Entity\DateFormat;

/**
 * Implements hook_element_info_alter().
 */
function jquery_ui_datepicker_element_info_alter(array &$types) {
  $types['datetime']['#pre_render'][] = 'jquery_ui_datepicker_element_pre_render';
}

/**
 * Adds timezone information to datetime element.
 */
function jquery_ui_datepicker_element_pre_render($element) {
  if (!empty($element['#jqdp'])) {
    $element['timezone'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => Datetime::formatExample('T'),
      '#attributes' => [
        'title' => \t('The date in the timezone of your account.'),
      ],
    ];
  }

  return $element;
}

/**
 * Parse date format.
 *
 * @param string $format
 *   The format.
 *
 * @return array
 *   Parsed format.
 */
function _date_format_parse(string $format): array {
  $timePattern = '/(\s+\-\s+)?(([hH]|[gG])(\s*\:\s*i)(\s*\:\s*s)?(\s*[aA])?)(\s*)(e|T)?/';

  $matches = [];
  \preg_match($timePattern, $format, $matches);

  if (!empty($matches[2])) {
    $timeFormat = $matches[2];
  }
  else {
    $timeFormat = 'G:i';
  }

  $dateFormat = \preg_replace($timePattern, '', $format);

  return [
    'date' => \trim($dateFormat),
    'time' => \trim($timeFormat),
  ];
}

/**
 * Convert PHP date format to jQuery Datepicker date format.
 *
 * @param string $phpFormat
 *   The php format.
 *
 * @return string
 *   The JQuery format.
 */
function _date_format_to_jquery_format(string $phpFormat): string {
  $symbolsMatching = [
    // Day symbols.
    'd' => 'dd',
    'D' => 'D',
    'j' => 'd',
    'l' => 'DD',
    'N' => '',
    'S' => '',
    'w' => '',
    'z' => 'o',
    // Week symbols.
    'W' => '',
    // Month symbols.
    'F' => 'MM',
    'm' => 'mm',
    'M' => 'M',
    'n' => 'm',
    't' => '',
    // Year symbols.
    'L' => '',
    'o' => '',
    'Y' => 'yy',
    'y' => 'y',
    // Time symbols.
    'a' => '',
    'A' => '',
    'B' => '',
    'g' => '',
    'G' => 'H',
    'h' => '',
    'H' => '',
    'i' => 'mm',
    's' => '',
    'u' => '',
    'e' => '',
  ];

  $jqueryuiFormat = '';
  $escaping = FALSE;

  foreach (\str_split($phpFormat) as $value) {
    $char = $value;
    if ($char === '\\') {
      if ($escaping) {
        $jqueryuiFormat .= $value;
      }
      else {
        $jqueryuiFormat .= '\'' . $value;
      }
      $escaping = TRUE;
    }
    else {
      if ($escaping) {
        $jqueryuiFormat .= "'";
        $escaping = FALSE;
      }
      if (isset($symbolsMatching[$char])) {
        $jqueryuiFormat .= $symbolsMatching[$char];
      }
      else {
        $jqueryuiFormat .= $char;
      }
    }
  }

  return $jqueryuiFormat;
}

/**
 * Copy of Datetime value callback that caused issues.
 *
 * @param array $element
 *   The element.
 * @param mixed $input
 *   Input.
 *
 * @return array
 *   Array with ['date' => ..., 'time' => ..., 'object' => ...].
 */
function jquery_ui_datepicker_value_callback(array &$element, $input) {
  if ($input !== FALSE) {
    $dateInput = $element['#date_date_element'] !== 'none' && !empty($input['date']) ? $input['date'] : '';
    $timeInput = $element['#date_time_element'] !== 'none' && !empty($input['time']) ? $input['time'] : '';
    $dateFormat = $element['#date_date_element'] !== 'none' ? _jquery_get_date_format($element) : '';
    $timeFormat = $element['#date_time_element'] !== 'none' ? _jquery_get_time_format($element) : '';
    $timezone = !empty($element['#date_timezone']) ? $element['#date_timezone'] : NULL;

    // Ensure the time has a seconds portion in case it was omitted or
    // stripped out by the browser.
    if (!empty($timeInput) && $element['#date_time_element'] === 'time' && \strlen($timeInput) === 5) {
      $timeInput .= ':00';
    }

    try {
      $dateTimeFormat = \trim($dateFormat . ' ' . $timeFormat);
      $dateTimeInput = \trim($dateInput . ' ' . $timeInput);
      $date = DrupalDateTime::createFromFormat($dateTimeFormat, $dateTimeInput, $timezone);
    }
    catch (\Exception $e) {
      $date = NULL;
    }
    $input = [
      'date'   => $dateInput,
      'time'   => $timeInput,
      'object' => $date,
    ];
  }
  else {
    $date = $element['#default_value'];
    if ($date instanceof DrupalDateTime && !$date->hasErrors()) {
      $input = [
        'date'   => $date->format($element['#date_date_format']),
        'time'   => $date->format($element['#date_time_format']),
        'object' => $date,
      ];
    }
    else {
      $input = [
        'date'   => '',
        'time'   => '',
        'object' => NULL,
      ];
    }
  }
  return $input;
}

/**
 * Copy of datetime getHtml5DateFormat.
 *
 * @param array $element
 *   The element.
 *
 * @return string
 *   Date format string.
 */
function _jquery_get_date_format(array $element): string {
  $pattern = $element['#date_date_format'];

  switch ($element['#date_date_element']) {
    case 'date':
      /** @var \Drupal\Core\Datetime\DateFormatInterface $format */
      $format = DateFormat::load('html_date');

      if ($format !== NULL) {
        $pattern = $format->getPattern();
      }
      break;

    case 'datetime':
    case 'datetime-local':
      /** @var \Drupal\Core\Datetime\DateFormatInterface $format */
      $format = DateFormat::load('html_datetime');

      if ($format !== NULL) {
        $pattern = $format->getPattern();
      }
      break;
  }

  return $pattern;
}

/**
 * Copy of datetime getHtml5TimeFormat.
 *
 * @param array $element
 *   The element.
 *
 * @return string
 *   The time format.
 */
function _jquery_get_time_format(array $element): string {
  $pattern = $element['#date_time_format'];
  if ($element['#date_time_element'] === 'time') {
    /** @var \Drupal\Core\Datetime\DateFormatInterface $format */
    $format = DateFormat::load('html_time');

    if ($format !== NULL) {
      $pattern = $format->getPattern();
    }
  }

  return $pattern;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jquery_ui_datepicker_form_views_exposed_form_alter(array &$form) {
  if (isset($form['#id']) && $form['#id'] === 'views-exposed-form-content-content-overview') {
    $form['#attached']['library'][] = 'jquery_ui_datepicker/datepicker';

    /** @var \Drupal\Core\Datetime\DateFormatInterface $tieto_date */
    $tieto_date = \Drupal::entityTypeManager()->getStorage('date_format')->load('tieto_date');
    $pattern = _date_format_parse($tieto_date->getPattern());

    $created_min = &$form['exposed_form']['created_min'];
    $created_max = &$form['exposed_form']['created_max'];

    $created_min['#type'] = 'textfield';
    $created_min['#date_date_format'] = $pattern['date'];

    $created_max['#type'] = 'textfield';
    $created_max['#date_date_format'] = $pattern['date'];

    $form['#attached']['drupalSettings']['jquery_ui_datepicker']['created_min'] = [
      'dateFormat' => _date_format_to_jquery_format($pattern['date']),
    ];

    $form['#attached']['drupalSettings']['jquery_ui_datepicker']['created_max'] = [
      'dateFormat' => _date_format_to_jquery_format($pattern['date']),
    ];
  }
}
