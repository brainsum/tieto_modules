<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function tieto_general_ui_theme() {
  return [
    'edit_toggle' => [
      'variables' => [
        'label' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_general_ui_preprocess_html(&$variables) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $routeMatch */
  $routeMatch = \Drupal::routeMatch();
  $routeName = $routeMatch->getRouteName();

  // Set `data-edit-mode` attribute for the body element.
  $variables['attributes']['data-edit-mode'] = (int) $variables['is_edit_mode'];

  switch ($routeName) {
    case 'entity.node.edit_form':
      $variables['attributes']['class'][] = 'node--edit';
      // To be in edit mode.
      $variables['attributes']['data-edit-mode'] = 1;
      break;

    case 'node.add':
      $variables['attributes']['class'][] = 'node--add';
      break;

    case 'node_clone.prepopulate_node':
      $variables['attributes']['class'][] = 'node--clone';
      break;
  }

  $routeWhitelist = [
    'entity.node.canonical',
    'entity.node.book_outline_form',
    'node_clone.prepopulate_node',
    'view.node_child_pages.child_pages',
    'entity.node.delete_form',
    'entity.node.version_history',
    'public_preview.preview_links_form',
    'public_preview.preview_link',
    'static_pages.child_reorder',
    'entity.node.revision',
    'entity.node.latest_version',
    'view.news.page',
  ];

  // Add edit toggle to page_bottom on these routes.
  if ($variables['show_edit_toggle'] && \in_array($routeName, $routeWhitelist, TRUE)) {
    $variables['#attached']['drupalSettings']['tieto_general_ui']['editMode'] = $variables['is_edit_mode'];
    $variables['#attached']['library'][] = 'tieto_general_ui/edit_mode';
    $variables['page']['page_bottom'] = ['#theme' => 'edit_toggle'];
  }

  if ($routeName === 'entity.node.canonical') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $routeMatch->getParameter('node');
    if ($node->hasField('path')) {
      $pathValue = $node->get('path')->getValue()[0];
      $alias = $pathValue['alias'] ?? NULL;
      $currentPath = \Drupal::request()->getPathInfo();

      if ($alias !== $currentPath) {
        $variables['page']['#attached']['html_head'][] = [
          [
            '#tag' => 'meta',
            '#attributes' => [
              'name' => 'robots',
              'content' => 'noindex',
            ],
          ],
          'robots',
        ];
      }
    }
  }
}

/**
 * Implements hook_library_info_build().
 */
function tieto_general_ui_library_info_build() {
  $libraries = [];

  $request = \Drupal::request();
  $host = $request->getHost();

  $libraryPrefix = (\strpos($host, 'demo-') === FALSE) ? '' : 'demo';
  $libraries['tieto_intra_topbar'] = _tieto_general_ui_create_toolbar_library($libraryPrefix);

  return $libraries;
}

/**
 * Generate a library definition array.
 *
 * @param string $prefix
 *   A prefix for the URL.
 *
 * @return array
 *   The library definition.
 */
function _tieto_general_ui_create_toolbar_library(string $prefix = ''): array {
  $url = '//' . ($prefix ? "$prefix-" : '') . 'topbar.intra.tieto.com/include.js';

  return [
    'version' => 2.2,
    'js' => [
      $url => [
        'type' => 'external',
        'attributes' => [
          'id' => 'tieto-top-menu',
          'theme' => 'light',
          'parent' => '#pre-header--tieto-intra-topbar-wrapper',
          'position' => 'relative',
          'defer' => TRUE,
          'async' => TRUE,
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_general_ui_preprocess_page(&$variables) {
  // Set custom page title depend on the node type.
  $variables['page_title'] = \Drupal::config('system.site')->get('name');
  $variables['page_title_url'] = $variables['base_path'];

  if (isset($variables['page']['pre_header'])) {
    $variables['page']['pre_header']['topbar_wrapper'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'pre-header--tieto-intra-topbar-wrapper',
      ],
    ];
  }
  $variables['#attached']['library'][] = 'tieto_general_ui/tieto_intra_topbar';
}

/**
 * Implements hook_preprocess().
 */
function tieto_general_ui_preprocess(array &$variables) {
  // By default, edit mode is always disabled.
  $variables['is_edit_mode'] = FALSE;
  $variables['show_edit_toggle'] = FALSE;
  // Add edit mode variables to all templates.
  if (\Drupal::currentUser()->hasPermission('toggle edit mode')) {
    $variables['show_edit_toggle'] = TRUE;
  }
}

/**
 * Implements hook_entity_operation().
 *
 * Add Clone operation to node entities.
 */
function tieto_general_ui_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() === 'node') {
    $operations['clone'] = [
      'title' => \t('Copy'),
      'url' => Url::fromRoute('node_clone.prepopulate_node', ['node' => $entity->id()]),
      'weight' => 15,
    ];
  }

  return $operations;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tieto_general_ui_form_node_form_alter(
  array &$form,
  FormStateInterface $form_state,
  $formId
) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $routeMatch */
  $routeMatch = \Drupal::routeMatch();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $routeMatch->getParameter('node');

  // Alter clone form - page title, node title.
  if ($routeMatch->getRouteName() === 'node_clone.prepopulate_node') {
    $form['title']['widget']['0']['value']['#default_value'] = \t('Copy of %title', [
      '%title' => $node->getTitle(),
    ]);
    $form['#title'] = \t('Copy content');
    \Drupal::messenger()
      ->addWarning(\t('You are going to create a copy of the page: @title_link', [
        '@title_link' => Link::createFromRoute(
          $node->getTitle(),
          'entity.node.canonical',
          [
            'node' => $node->id(),
          ],
          [
            'attributes' => [
              'target' => '_blank',
            ],
          ]
        )->toString(),
      ]));
  }

  if (isset($form['path']['widget']['0']['pathauto']) && \strpos($formId, 'edit_form') !== FALSE) {
    $form['path']['widget']['0']['pathauto']['#value'] = TRUE;
    \hide($form['path']['widget']['0']['pathauto']);
  }

  if (isset($form['field_side_block']['widget']['text'])) {
    unset($form['field_side_block']['widget']['text']);
  }

  // Add placeholder to meta tags from global node settings.
  $defaultNodeMetaTags = $form['field_meta_tags']['widget'][0]['basic']['description']['#placeholder'] = \Drupal::config('metatag.metatag_defaults.node')->get('tags');
  foreach ($defaultNodeMetaTags as $key => $configValue) {
    if ($configValue && isset($form['field_meta_tags']['widget'][0]['basic'][$key])) {
      $form['field_meta_tags']['widget'][0]['basic'][$key]['#placeholder'] = $configValue;
    }
  }

  unset(
    $form['field_image'],
    $form['field_thumbnail']
  );

  _tieto_general_ui_unavailable_information_owner_notification($node);
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Fix for node_clone: Remove 'Clone' from local TAB if type is omitted.
 */
function tieto_general_ui_menu_local_tasks_alter(array &$data) {
  /** @var \Drupal\Core\Cache\CacheableMetadata $cacheability */
  $cacheability = $data['cacheability'];
  foreach ($data['tabs'] as &$tab) {
    foreach ($tab as $route => $item) {
      if ($route === 'entity.node.node_clone.prepopulate_node') {
        /** @var \Drupal\node\NodeStorageInterface $nodeStorage */
        $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

        $nid = $item['#link']['url']->getRouteParameters()['node'];
        /** @var \Drupal\node\NodeInterface $node */
        $node = $nodeStorage->load($nid);
        if (NULL === $node) {
          return;
        }
        $type = $node->getType();
        $omitted = \Drupal::config('node_clone.settings')
          ->get('node_clone_omitted');
        if (!empty($omitted[$type])) {
          unset($tab[$route]);
        }
      }
    }
  }
  unset($tab);
  $data['cacheability'] = $cacheability;
}

/**
 * Implements hook_menu_local_actions_alter().
 *
 * Fix for node_clone: Remove 'Clone content' - we added to local tasks (TAB).
 */
function tieto_general_ui_menu_local_actions_alter(array &$localActions) {
  unset($localActions['node_clone.clone_action']);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Hide node title.
 */
function tieto_general_ui_preprocess_page_title(&$variables) {
  $route = \Drupal::routeMatch();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $route->getParameter('node');
  if (NULL === $node) {
    return;
  }

  if ('entity.node.canonical' === $route->getRouteName()) {
    unset($variables['title']);
  }
}

/**
 * Implements hook_preprocess_hook().
 *
 * Set Book Navigation block title from actual page's Book title.
 */
function tieto_general_ui_preprocess_block(array &$variables) {
  if (
    $variables['elements']['#id'] === 'booknavigation'
    && $variables['configuration']['block_mode'] === 'book pages'
    /** @var \Drupal\node\NodeInterface $node */
    && ($node = \Drupal::routeMatch()->getParameter('node'))
    && !empty($node->book['bid'])
    /** @var \Drupal\node\NodeStorageInterface $nodeStorage */
    && ($nodeStorage = \Drupal::entityTypeManager()->getStorage('node'))
    /** @var \Drupal\node\NodeInterface $book */
    && ($book = $nodeStorage->load($node->book['bid']))
    && $book !== NULL
  ) {
    $variables['label'] = Link::createFromRoute(
      $book->get('title')->value,
      'entity.node.canonical',
      [
        'node' => $node->book['bid'],
      ]
    )->toString();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_general_ui_preprocess_node(array &$variables) {
  /** @var \Drupal\Component\Datetime\TimeInterface $time */
  $time = \Drupal::time();
  /** @var \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter */
  $dateFormatter = \Drupal::service('date.formatter');
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Change creation date to "Time Ago" format.
  $changed = $node->getChangedTime();
  $variables['date_raw'] = $dateFormatter->format($changed, 'tieto_date');
  $variables['date_ago'] = $dateFormatter->formatDiff($changed, $time->getRequestTime(), [
    'granularity' => 1,
  ]);

  if ($variables['view_mode'] === 'full') {
    _tieto_general_ui_unavailable_information_owner_notification($node);
  }
}

/**
 * Implements hook_form_alter().
 */
function tieto_general_ui_form_alter(array &$form, FormStateInterface $form_state, $formId) {
  if ($formId === 'views_form_content_content_overview') {
    if (isset($form['header']['node_bulk_form']['action']['#options']['node_publish_action'])) {
      $form['header']['node_bulk_form']['action']['#options']['node_publish_action'] = \t('Set to Published');
    }
    if (isset($form['header']['node_bulk_form']['action']['#options']['node_unpublish_action'])) {
      $form['header']['node_bulk_form']['action']['#options']['node_unpublish_action'] = \t('Set to Unpublished');
    }
  }

  if ($formId === 'taxonomy_term_unit_form' && isset($form['field_inactive'])) {
    $form['field_inactive']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tieto_general_ui_form_views_exposed_form_alter(
  array &$form,
  FormStateInterface $form_state,
  $formId
) {
  // Change input type to process date picker.
  if (\in_array($form['#id'], [
    'views-exposed-form-content-content-overview',
    'views-exposed-form-content-trash',
    'views-exposed-form-news-page',
    'views-exposed-form-orphaned-page',
  ], FALSE)) {
    // Change form element type to date.
    $form['created_min']['#type'] = $form['created_max']['#type'] = 'date';
    $form['created_min']['#date_date_format'] = $form['created_max']['#date_date_format'] = 'Y-m-d';

    // Create Details group for Content filters.
    $form['exposed_form'] = [
      '#type' => 'details',
      '#title' => \t('Filters'),
      '#open' => FALSE,
    ];

    // Move the filters to the Details group.
    $form['exposed_form']['title'] = $form['title'];
    $form['exposed_form']['title']['#title'] = $form['#info']['filter-title']['label'];
    unset($form['title']);
    $form['exposed_form']['created_min'] = $form['created_min'];
    $form['exposed_form']['created_min']['#title'] = $form['#info']['filter-created']['label'];
    unset($form['created_min']);
    $form['exposed_form']['created_max'] = $form['created_max'];
    $form['exposed_form']['created_max']['#title'] = $form['#info']['filter-created_1']['label'];
    unset($form['created_max']);
    $form['exposed_form']['uid'] = $form['uid'];
    $form['exposed_form']['uid']['#title'] = $form['#info']['filter-uid']['label'];
    unset($form['uid']);

    if (isset($form['moderation_state']) && $form['#id'] !== 'views-exposed-form-content-trash') {
      $form['exposed_form']['moderation_state'] = $form['moderation_state'];
      $form['exposed_form']['moderation_state']['#title'] = $form['#info']['filter-moderation_state']['label'];
      unset($form['moderation_state']);
    }

    $form['exposed_form']['actions'] = $form['actions'];
    unset($form['actions']);

    // Unset the 'Status' filter for users without the
    // 'toggle edit mode' permission.
    // This means, that anyone with a proper role will have access, but
    // plain 'authorized' users won't.
    if ($form['#id'] === 'views-exposed-form-news-page' && !\Drupal::currentUser()->hasPermission('toggle edit mode')) {
      unset($form['exposed_form']['moderation_state']);
    }
  }
}

/**
 * Show warning message if an assigned information owner is deleted or blocked.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   The entity.
 *
 * @see: EL-840.
 * @todo: Move to service.
 */
function _tieto_general_ui_unavailable_information_owner_notification(FieldableEntityInterface $entity): void {
  if (!$entity->hasField('field_information_owner')) {
    return;
  }

  $ownerField = $entity->get('field_information_owner');
  /** @var \Drupal\Core\Field\FieldItemInterface $item */
  foreach ($ownerField as $item) {
    /** @var \Drupal\user\UserInterface $user */
    $user = $item->entity;

    if ($user === NULL || $user->isBlocked()) {
      \Drupal::messenger()->addWarning(\t('The original information owner is not a Tieto employee anymore, please add a new one.'));
    }
  }
}
