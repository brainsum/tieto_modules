<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function tieto_general_ui_theme() {
  return [
    'edit_toggle' => [
      'variables' => [
        'label' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_general_ui_preprocess_html(&$variables) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $routeMatch */
  $routeMatch = \Drupal::routeMatch();
  $routeName = $routeMatch->getRouteName();

  // Set `data-edit-mode` attribute for the body element.
  $variables['attributes']['data-edit-mode'] = (int) $variables['is_edit_mode'];

  switch ($routeName) {
    case 'entity.node.edit_form':
      $variables['attributes']['class'][] = 'node--edit';
      // To be in edit mode.
      $variables['attributes']['data-edit-mode'] = 1;
      break;

    case 'node.add':
      $variables['attributes']['class'][] = 'node--add';
      break;

    case 'node_clone.prepopulate_node':
      $variables['attributes']['class'][] = 'node--clone';
      break;
  }

  $routeWhitelist = [
    'entity.node.canonical',
    'entity.node.book_outline_form',
    'node_clone.prepopulate_node',
    'view.node_child_pages.child_pages',
    'entity.node.delete_form',
    'entity.node.version_history',
    'public_preview.preview_links_form',
    'public_preview.preview_link',
    'static_pages.child_reorder',
    'entity.node.revision',
    'entity.node.latest_version',
    'view.news.page',
  ];

  // Add edit toggle to page_bottom on these routes.
  if ($variables['show_edit_toggle'] && \in_array($routeName, $routeWhitelist, TRUE)) {
    $variables['#attached']['drupalSettings']['tieto_general_ui']['editMode'] = $variables['is_edit_mode'];
    $variables['#attached']['library'][] = 'tieto_general_ui/edit_mode';
    $variables['page']['page_bottom'] = ['#theme' => 'edit_toggle'];
  }
}

/**
 * Implements hook_library_info_build().
 */
function tieto_general_ui_library_info_build() {
  $libraries = [];

  $request = \Drupal::request();
  $host = $request->getHost();

  $libraryPrefix = (\strpos($host, 'demo-') === FALSE) ? '' : 'demo';
  $libraries['tieto_intra_topbar'] = _tieto_general_ui_create_toolbar_library($libraryPrefix);

  return $libraries;
}

/**
 * Generate a library definition array.
 *
 * @param string $prefix
 *   A prefix for the URL.
 *
 * @return array
 *   The library definition.
 */
function _tieto_general_ui_create_toolbar_library(string $prefix = ''): array {
  $url = '//' . ($prefix ? "$prefix-" : '') . 'topbar.intra.tieto.com/include.js';

  return [
    'version' => 2.2,
    'js' => [
      $url => [
        'type' => 'external',
        'attributes' => [
          'id' => 'tieto-top-menu',
          'theme' => 'light',
          'parent' => '#pre-header--tieto-intra-topbar-wrapper',
          'position' => 'relative',
          'defer' => TRUE,
          'async' => TRUE,
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_general_ui_preprocess_page(&$variables) {
  if (isset($variables['page']['pre_header'])) {
    $variables['page']['pre_header']['topbar_wrapper'] = [
      '#type' => 'container',
      '#attributes' => [
        'id' => 'pre-header--tieto-intra-topbar-wrapper',
      ],
    ];
  }
  $variables['#attached']['library'][] = 'tieto_general_ui/tieto_intra_topbar';
}

/**
 * Implements hook_preprocess().
 */
function tieto_general_ui_preprocess(array &$variables) {
  // By default, edit mode is always disabled.
  $variables['is_edit_mode'] = FALSE;
  $variables['show_edit_toggle'] = FALSE;
  // Add edit mode variables to all templates.
  if (\Drupal::currentUser()->hasPermission('toggle edit mode')) {
    $variables['show_edit_toggle'] = TRUE;
  }
}

/**
 * Implements hook_entity_operation().
 *
 * Add Clone operation to node entities.
 */
function tieto_general_ui_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() === 'node') {
    $operations['clone'] = [
      'title' => \t('Copy'),
      'url' => Url::fromRoute('node_clone.prepopulate_node', ['node' => $entity->id()]),
      'weight' => 15,
    ];
  }

  return $operations;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tieto_general_ui_form_node_alter(
  array &$form,
  FormStateInterface $form_state,
  $form_id
) {
  /** @var \Drupal\Core\Routing\RouteMatchInterface $routeMatch */
  $routeMatch = \Drupal::routeMatch();

  // Alter clone form - page title, node title.
  if ($routeMatch->getRouteName() === 'node_clone.prepopulate_node') {
    // Load the current node.
    $node = $routeMatch->getParameter('node');
    $form['title']['widget']['0']['value']['#default_value'] = \t('Copy of %title', [
      '%title' => $node->getTitle(),
    ]);
    $form['#title'] = \t('Copy content');
    \Drupal::messenger()
      ->addWarning(\t('You are going to create a copy of the page: @title_link', [
        '@title_link' => Link::createFromRoute(
          $node->getTitle(),
          'entity.node.canonical',
          [
            'node' => $node->id(),
          ],
          [
            'attributes' => [
              'target' => '_blank',
            ],
          ]
        )->toString(),
      ]));
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Fix for node_clone: Remove 'Clone' from local TAB if type is omitted.
 */
function tieto_general_ui_menu_local_tasks_alter(array &$data, $route_name) {
  /** @var \Drupal\Core\Cache\CacheableMetadata $cacheability */
  $cacheability = $data['cacheability'];
  foreach ($data['tabs'] as &$tab) {
    foreach ($tab as $route => $item) {
      if ($route === 'entity.node.node_clone.prepopulate_node') {
        /** @var \Drupal\node\NodeStorageInterface $nodeStorage */
        $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

        $nid = $item['#link']['url']->getRouteParameters()['node'];
        /** @var \Drupal\node\NodeInterface $node */
        $node = $nodeStorage->load($nid);
        if (NULL === $node) {
          return;
        }
        $type = $node->getType();
        $omitted = \Drupal::config('node_clone.settings')
          ->get('node_clone_omitted');
        if (!empty($omitted[$type])) {
          unset($tab[$route]);
        }
      }
    }
  }
  unset($tab);
  $data['cacheability'] = $cacheability;
}

/**
 * Implements hook_menu_local_actions_alter().
 *
 * Fix for node_clone: Remove 'Clone content' - we added to local tasks (TAB).
 */
function tieto_general_ui_menu_local_actions_alter(&$local_actions) {
  unset($local_actions['node_clone.clone_action']);
}
